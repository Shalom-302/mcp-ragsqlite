import os
import re
import sqlite3
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP
from langchain_community.utilities import SQLDatabase
from langchain.chains import create_sql_query_chain
from langchain_google_genai import ChatGoogleGenerativeAI
import google.generativeai as genai

# Chargement des variables d'environnement (cl√© API)
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# üíæ Chemins vers la base de donn√©es
SQLALCHEMY_URI = "sqlite:///csv.db"  
SQLITE_PATH = "csv.db"              

# V√©rifier si le fichier existe
if not os.path.exists(SQLITE_PATH):
    raise FileNotFoundError(f"Base de donn√©es non trouv√©e : {SQLITE_PATH}")

# üîó Connexion √† la base pour LangChain
db = SQLDatabase.from_uri(SQLALCHEMY_URI)

# üîÆ Mod√®le LLM Gemini
llm = ChatGoogleGenerativeAI(model='gemini-1.5-pro', temperature=0.5)

# üß† Cr√©ation de la cha√Æne LangChain
sql_chain = create_sql_query_chain(llm, db)
# üöÄ Lancement du serveur MCP
mcp = FastMCP("rag_sqlite_mcp_server")

# üîé Utilitaire pour extraire proprement la requ√™te SQL depuis un texte
def extract_sql(text: str) -> str:
    if "```sql" in text:
        return re.search(r"```sql\s*(.*?)\s*```", text, re.DOTALL).group(1).strip()
    if "SQLQuery:" in text:
        return text.split("SQLQuery:")[1].strip()
    for line in text.splitlines():
        if "SELECT" in line.upper() or "PRAGMA" in line.upper():
            return line.strip()
    return text.strip()
# üì¶ MCP : Ressource exposant les tables disponibles
@mcp.resource("database://csv")
def list_tables() -> str:
    """Retourne la liste des tables dans la base de donn√©es."""
    conn = sqlite3.connect(SQLITE_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = [row[0] for row in cursor.fetchall()]
    conn.close()
    if not tables:
        return "Aucune table disponible dans la base de donn√©es."
    return str(tables)

# üì¶ MCP : Ressource pour lister les colonnes d'une table donn√©e
@mcp.resource("database://csv/{table_name}/columns")
def list_columns(table_name: str) -> str:
    """Retourne la liste des colonnes dans une table donn√©e."""
    conn = sqlite3.connect(SQLITE_PATH)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name});")
    columns = [row[1] for row in cursor.fetchall()]  # Le nom des colonnes se trouve en position 1
    conn.close()
    if not columns:
        return f"Aucune colonne trouv√©e pour la table {table_name}."
    return str(columns)

# üì¶ MCP : Ressource pour lister les lignes d'une table donn√©e
@mcp.resource("database://csv/{table_name}/rows")
def list_rows(table_name: str) -> str:
    """Retourne les lignes d'une table donn√©e."""
    conn = sqlite3.connect(SQLITE_PATH)
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM {table_name};")
    rows = cursor.fetchall()
    conn.close()
    if not rows:
        return f"Aucune ligne trouv√©e dans la table {table_name}."
    # Retourne seulement un nombre limit√© de lignes (par exemple 10) pour √©viter une surcharge d'affichage
    return str(rows[:10])  # Limiter les r√©sultats √† 10 lignes pour √©viter un trop grand volume de donn√©es


@mcp.resource("database://csv/students/{column_name}/data")
def list_column_data(column_name: str) -> str:
    """Retourne toutes les donn√©es d'une colonne sp√©cifique de la table students."""
    conn = sqlite3.connect(SQLITE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute(f"SELECT {column_name} FROM students")
        rows = cursor.fetchall()

        conn.close()

        if rows:
            # Format de la r√©ponse pour lister chaque √©l√©ment de la colonne
            return "\n".join([str(row[0]) for row in rows])  # Chaque ligne correspond √† un √©l√©ment de la colonne
        else:
            return f"Aucune donn√©e trouv√©e dans la colonne '{column_name}'."

    except sqlite3.Error as e:
        conn.close()
        return f"Erreur lors de la r√©cup√©ration des donn√©es de la colonne {column_name}: {str(e)}"



@mcp.resource("database://csv/students/all/data")
def list_all_student_data() -> str:
    """Retourne toutes les donn√©es (lignes et colonnes) de la table students."""
    conn = sqlite3.connect(SQLITE_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT * FROM students")
        rows = cursor.fetchall()
        columns = [description[0] for description in cursor.description]

        conn.close()

        if rows:
            # Format de la r√©ponse : une ligne par √©tudiant, chaque valeur de la ligne s√©par√©e par colonne
            result = "\n".join([", ".join([f"{columns[i]}: {row[i]}" for i in range(len(columns))]) for row in rows])
            return result
        else:
            return "Aucune donn√©e trouv√©e dans la table students."

    except sqlite3.Error as e:
        conn.close()
        return f"Erreur lors de la r√©cup√©ration des donn√©es de la table students : {str(e)}"

# üõ†Ô∏è MCP : Outil pour ex√©cuter une requ√™te SQL
@mcp.tool()
def execute_query(sql_query: str) -> str:
    """Ex√©cute une requ√™te SQL sur la base de donn√©es et retourne les r√©sultats."""
    conn = sqlite3.connect(SQLITE_PATH)
    try:
        cursor = conn.cursor()
        cursor.execute(sql_query)
        results = cursor.fetchall()
        conn.close()
        if results:
            # Formater les r√©sultats correctement pour chaque ligne
            formatted_results = "\n".join([str(row[0]) for row in results])  # Chaque ligne est un √©l√©ment
            return formatted_results
        else:
            return "Requ√™te ex√©cut√©e avec succ√®s, mais aucun r√©sultat retourn√©."
    except sqlite3.Error as e:
        conn.close()
        return f"Erreur d'ex√©cution de la requ√™te SQL : {str(e)}"

# Fonction de prompt pour poser des questions en langage naturel
# @mcp.prompt()
# def ask_database_prompt(question: str) -> str:
#     """Utilise LangChain pour transformer une question en requ√™te SQL."""
#     result = sql_chain.invoke({"question": question})
#     return extract_sql(result)

@mcp.prompt()
def ask_database_prompt(question: str) -> str:
    """Utilise LangChain pour transformer une question en requ√™te SQL compl√®te."""
    result = sql_chain.invoke({"question": f"{question}. Donne une requ√™te SQL compl√®te avec toutes les colonnes si possible."})
    return extract_sql(result)

#######################################




# 2. Fonction de prompt pour poser des questions en langage naturel

# 3. Fonction de ressource pour interroger la base de donn√©es avec une question en langage naturel
@mcp.resource("database://csv/query/{question}")
def ask_and_execute_query(question: str) -> str:
    """Demande √† ex√©cuter une requ√™te SQL g√©n√©r√©e par le LLM."""
    
    # Utiliser le prompt pour transformer la question en une instruction SQL
    prompt_response = ask_database_prompt(question)
    
    # On extrait la requ√™te SQL √† partir du prompt
    sql_query = extract_sql_from_prompt(prompt_response)
    
    # Ex√©cuter la requ√™te via l'outil 'execute_query'
    return execute_query(sql_query)

# Fonction pour extraire la requ√™te SQL √† partir du prompt g√©n√©r√©
def extract_sql_from_prompt(prompt_response: str) -> str:
    """Extrait la requ√™te SQL d'un prompt donn√© par le LLM."""
    # Rechercher la requ√™te SQL dans le texte du prompt
    match = re.search(r"SQLQuery:(.*)", prompt_response, re.DOTALL)
    if match:
        return match.group(1).strip()
    return prompt_response.strip()

# ‚ñ∂Ô∏è Lancer le serveur (mode console stdio)
if __name__ == "__main__":
    mcp.run(transport="stdio")
